###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.1.4415/W32 for ARM      29/Jan/2014  10:04:14 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\src\port_task.c                      #
#    Command line =  E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\src\port_task.c -D                   #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL   #
#                    -lcN E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\Fre #
#                    eRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\ -o    #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\STM322xG_EVAL\Obj\ --no_cse    #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program  #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\arm\INC\c\DLib_Config_Full.h" -I                     #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\inc\ -I                     #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Libraries\CMSIS\CM #
#                    3\DeviceSupport\ST\STM32F2xx\ -I                         #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2x #
#                    x_StdPeriph_Driver\inc\ -I E:\work\ihome\spi\mcu\ihome_s #
#                    tm_021\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\ #
#                    ..\..\..\Libraries\STM32F2x7_ETH_Driver\inc\ -I          #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EV #
#                    AL\Common\ -I E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Pr #
#                    oject\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Util #
#                    ities\STM32_EVAL\STM322xG_EVAL\ -I                       #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Pa #
#                    rty\lwip_v1.3.2\src\include\ -I                          #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Pa #
#                    rty\lwip_v1.3.2\src\include\lwip\ -I                     #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Pa #
#                    rty\lwip_v1.3.2\src\include\netif\ -I                    #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Pa #
#                    rty\lwip_v1.3.2\src\include\ipv4\ -I                     #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Pa #
#                    rty\lwip_v1.3.2\port\STM32F2x7\ -I                       #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Pa #
#                    rty\lwip_v1.3.2\port\STM32F2x7\FreeRTOS\ -I              #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Pa #
#                    rty\FreeRTOS_v7.4.2\portable\IAR\ARM_CM3\ -I             #
#                    E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Pa #
#                    rty\FreeRTOS_v7.4.2\include\ -On --use_c++_inline -I     #
#                    "C:\Program Files (x86)\IAR Systems\Embedded Workbench   #
#                    6.5\arm\CMSIS\Include\"                                  #
#    List file    =  E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\STM322xG_EVAL\List\port_task.l #
#                    st                                                       #
#    Object file  =  E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS #
#                    \httpserver_netconn\EWARM\STM322xG_EVAL\Obj\port_task.o  #
#                                                                             #
#                                                                             #
###############################################################################

E:\work\ihome\spi\mcu\ihome_stm_021\IAR\Project\FreeRTOS\httpserver_netconn\src\port_task.c
      1          #include "main.h"
      2          #include "ports_low_level.h"
      3          #include "port_task.h"
      4          #include "tcp_client_netconn.h"
      5          
      6          
      7          
      8          extern port_group_str	igpoup[NUM_OUTPUT_PORTS]; 
      9          
     10          extern struct port_str	iport[NUM_ALL_PORTS]; 
     11          
     12          extern xQueueHandle xQueue_tcp_client; //ќчередь дл€ хранени€ сообщений посылаемых через ETH
     13          
     14          
     15          extern xSemaphoreHandle xUSARTSemaphore;
     16          
     17          /** ----------------------------------------------------------------------------
     18          * @brief 
     19          * @param
     20          * @return void
     21          */
     22          
     23          
     24          void task_scan_ports(void *dummy)
     25          {
     26            
     27          	portBASE_TYPE 	i; 
     28          	struct port_str *in_port;
     29            	portBASE_TYPE 	xStatus;	
     30          	
     31            	 tcp_msg_str tcp_msg;  
     32          	
     33          	
     34          	portTickType xLastWakeTime;
     35          	
     36          	xLastWakeTime = xTaskGetTickCount();
     37          	
     38          	  
     39          	while(1) {
     40            
     41          		for (i=0; i<NUM_OUTPUT_PORTS; i++) {
     42          		
     43          			if (igpoup[i].input_ports != NULL) {
     44          			
     45          				// list head
     46          				in_port = igpoup[i].input_ports; 
     47          				
     48          				if (iport_input_changed(in_port)) {
     49          				  
     50          
     51          					msg_dbg_tsk(("iport_input_changed: port = %d, key = %d, group = %d, status = %d\n",
     52          								in_port->num_port, in_port->key, i, in_port->status));	
     53          					
     54          					
     55          				  
     56          					sprintf(tcp_msg.payload,"c: p=%d, k=%d, g=%d, s=%d",
     57          						   in_port->num_port, in_port->key, i, in_port->status);
     58          					
     59          					
     60          					tcp_msg.num_bytes = strlen(tcp_msg.payload); 
     61          					
     62          					xStatus = xQueueSendToBack( xQueue_tcp_client, &tcp_msg, QUEUE_WRITE_TICKS_TO_WAIT );
     63          					if (xStatus != pdTRUE){
     64          
     65          					  	msg_dbg_tsk(("Can't to write to queue, error is = %d\n", xStatus));
     66          					}					
     67          					
     68          					iport_toggle_group_output(&igpoup[i]);
     69          					
     70          				} else {	// head list done
     71          			
     72          					// walk through list, exit when input changes
     73          					while (in_port->next_port != NULL) {
     74          						in_port = in_port->next_port; 					
     75          						if (iport_input_changed(in_port)) {
     76          						  
     77          					
     78          							msg_dbg_tsk(("iport_input_changed: port = %d, key = %d, group = %d, status = %d\n",
     79          										in_port->num_port, in_port->key, i, in_port->status));
     80          						
     81          							
     82          							sprintf(tcp_msg.payload,"c: p=%d, k=%d, g=%d, s=%d",
     83          								   in_port->num_port, in_port->key, i, in_port->status);
     84          							
     85          							
     86          							tcp_msg.num_bytes = strlen(tcp_msg.payload); 
     87          							
     88          							xStatus = xQueueSendToBack( xQueue_tcp_client, &tcp_msg, QUEUE_WRITE_TICKS_TO_WAIT );
     89          							if (xStatus != pdTRUE){
     90          
     91          								msg_dbg_tsk(("Can't to write to queue, error is = %d\n", xStatus));
     92          							}				
     93          										 
     94          										 
     95          							iport_toggle_group_output(&igpoup[i]);
     96          							break;
     97          						}
     98          					}
     99          			
    100          				}
    101          			} // if inputport != NULL
    102          			
    103          		} // output ports for loop cycle
    104          		
    105          		
    106          		// sleep for PORT_SCAN_PERIOD_MS milliseconds
    107          		vTaskDelayUntil( &xLastWakeTime, PORT_SCAN_PERIOD_MS/portTICK_RATE_MS );
    108          
    109          	
    110          	} // while(1)
    111          
    112          	vTaskDelete(NULL);
    113          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   task_scan_ports
        48   -> iport_input_changed
        48   -> iport_toggle_group_output
        48   -> printf
        48   -> sprintf
        48   -> strlen
        48   -> vTaskDelayUntil
        48   -> xQueueGenericReceive
        48   -> xQueueGenericSend
        48   -> xTaskGetTickCount


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      40  ?<Constant "Can\'t to write to que...">
      28  ?<Constant "c: p=%d, k=%d, g=%d, ...">
      68  ?<Constant "iport_input_changed: ...">
     424  task_scan_ports

 
 136 bytes in section .rodata
 424 bytes in section .text
 
 424 bytes of CODE  memory
 136 bytes of CONST memory

Errors: none
Warnings: 5
