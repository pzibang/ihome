###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.70.2.6274/W32 for ARM      24/Mar/2014  18:40:54 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\src\relay_thread.c             #
#    Command line =  E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\src\relay_thread.c -D          #
#                    USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL   #
#                    -lcN E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Proje #
#                    ct\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\ #
#                     -o E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Projec #
#                    t\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\   #
#                    --no_cse --no_unroll --no_inline --no_code_motion        #
#                    --no_tbaa --no_clustering --no_scheduling --debug        #
#                    --endian=little --cpu=Cortex-M3 -e --fpu=None            #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Pr #
#                    oject\FreeRTOS\httpserver_netconn\EWARM\..\inc\ -I       #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\CM #
#                    SIS\CM3\DeviceSupport\ST\STM32F2xx\ -I                   #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\ST #
#                    M32F2xx_StdPeriph_Driver\inc\ -I                         #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\ST #
#                    M32F2x7_ETH_Driver\inc\ -I E:\work\ihome\software\mcu\ih #
#                    ome_mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWA #
#                    RM\..\..\..\..\Utilities\STM32_EVAL\Common\ -I           #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\ST #
#                    M32_EVAL\STM322xG_EVAL\ -I E:\work\ihome\software\mcu\ih #
#                    ome_mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\EWA #
#                    RM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\inc #
#                    lude\ -I E:\work\ihome\software\mcu\ihome_mcu_main\IAR\P #
#                    roject\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Uti #
#                    lities\Third_Party\lwip_v1.3.2\src\include\lwip\ -I      #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Th #
#                    ird_Party\lwip_v1.3.2\src\include\netif\ -I              #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Th #
#                    ird_Party\lwip_v1.3.2\src\include\ipv4\ -I               #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Th #
#                    ird_Party\lwip_v1.3.2\port\STM32F2x7\ -I                 #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Th #
#                    ird_Party\lwip_v1.3.2\port\STM32F2x7\FreeRTOS\ -I        #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Th #
#                    ird_Party\FreeRTOS_v7.4.2\portable\IAR\ARM_CM3\ -I       #
#                    E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Th #
#                    ird_Party\FreeRTOS_v7.4.2\include\ -On --use_c++_inline  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\relay #
#                    _thread.lst                                              #
#    Object file  =  E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\Fr #
#                    eeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\relay_ #
#                    thread.o                                                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\work\ihome\software\mcu\ihome_mcu_main\IAR\Project\FreeRTOS\httpserver_netconn\src\relay_thread.c
      1          #include "main.h"
      2          #include "relay_thread.h"
      3          #include "spi_low_level.h"
      4          
      5          
      6          extern xQueueHandle relay_input_queue ;
      7          extern xQueueHandle relay_output_queue ;
      8          
      9          extern xSemaphoreHandle xUSARTSemaphore;
     10          
     11          
     12          
     13          uint8_t	current_relay_state[NUM_RELAY_BOARDS];
     14          
     15          
     16          /**
     17           * 	function relay_read_input_queue
     18           *
     19           * 	@brief Main thread function. Executed every RELAY_SCAN_PERIOD_MS millicesonds.
     20           *
     21           *
     22           * 	@param  *pParams
     23           *
     24           * 	@return never
     25           *
     26           */
     27          void relay_thread(void *pParams)
     28          {
     29          	uint8_t			board;
     30          	uint8_t 		new_relay_state;
     31          
     32          
     33          	portTickType 	xLastWakeTime;
     34          
     35          	msg_dbg_tsk(("Entering relay_thread...\n\r"));
     36          
     37          
     38          	xLastWakeTime = xTaskGetTickCount();
     39          
     40          	// start endless loop
     41          	while(1) {
     42          
     43          		// read data from input queue until it is empty
     44          		while(relay_read_input_queue(&board, &new_relay_state) == pdTRUE) {
     45          
     46          			// check input parameter
     47          			if (board >= NUM_RELAY_BOARDS) {
     48          				msg_dbg_tsk(("Error in relay_thread: board >= NUM_RELAY_BOARDS\n\r"));
     49          				continue;
     50          			}
     51          
     52          			// for every read value update power register in relay board
     53          			if (new_relay_state != current_relay_state[board]) {
     54          
     55          				current_relay_state[board] = new_relay_state;
     56          				relay_write_reg_spi(board, new_relay_state);
     57          			}
     58          		}
     59          
     60          
     61          		// scan through all relay boards and read it power register
     62          		for (board = 0; board < NUM_RELAY_BOARDS; board++) {
     63          
     64          			new_relay_state = relay_read_reg_spi(board);
     65          
     66          			if (new_relay_state != current_relay_state[board]) {
     67          
     68          				current_relay_state[board] = new_relay_state;
     69          
     70          				if (relay_write_output_queue(board, new_relay_state) != pdTRUE) {
     71          					msg_dbg_tsk(("Error in relay_thread: can not write to output queue\n\r"));
     72          				}
     73          
     74          
     75          			}
     76          
     77          		}
     78          
     79          
     80          		vTaskDelayUntil( &xLastWakeTime, RELAY_SCAN_PERIOD_MS/portTICK_RATE_MS );
     81          
     82          	} // while(1)
     83          }
     84          
     85          
     86          
     87          
     88          // internal fucntions
     89          
     90          /**
     91           * 	function relay_read_input_queue
     92           *
     93           * 	Reads relay_input_queue. If queue is empty - exit immediately.
     94           * 	Queue item is uint16_t word:
     95           * 		Eight MSB - board number
     96           * 		Eight LSB - new relay state
     97           *
     98           *
     99           * 	@param  *board A pointer to uint8_t variable to hold relay board number
    100           *
    101           * 	@param  *new_relay_state A pointer to uint8_t variable to hold new relay state
    102           *
    103           * 	@return pdTRUE if successfully read data from queue, else - pdFALSE
    104           *
    105           */
    106          portBASE_TYPE relay_read_input_queue(uint8_t *board, uint8_t *new_relay_state)
    107          {
    108          	uint16_t data16;
    109          
    110          	// if queue is empty - exit immediately
    111          	if (xQueueReceive(relay_input_queue, &data16, 0) == pdTRUE) {
    112          		*board 			= (uint8_t)(data16 >> 8);
    113          		*new_relay_state = (uint8_t)data16;
    114          		return pdTRUE;
    115          	}
    116          
    117          	return pdFALSE;
    118          }
    119          
    120          /**
    121           *
    122           * 	@brief Posts data to relay_output_queue.
    123           * 	If queue is full - wait for QUEUE_WRITE_TICKS_TO_WAIT system ticks
    124           *
    125           * 	Queue item is uint16_t word:
    126           * 		Eight MSB - board number
    127           * 		Eight LSB - new relay state
    128           *
    129           *
    130           * 	@param  board Relay board number
    131           *
    132           * 	@param  new_relay_state New relay state
    133           *
    134           * 	@return pdTRUE if successfully posted data to queue, else - pdFALSE
    135           *
    136           */
    137          portBASE_TYPE relay_write_output_queue(uint8_t board, uint8_t new_relay_state)
    138          {
    139          	uint16_t data16;
    140          
    141          	data16 = (((uint16_t)board) << 8) + new_relay_state;
    142          
    143          	return xQueueSend(relay_output_queue, &data16, QUEUE_WRITE_TICKS_TO_WAIT);
    144          }
    145          
    146          
    147          
    148          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   relay_read_input_queue
        16   -> xQueueGenericReceive
      16   relay_thread
        16   -> printf
        16   -> relay_read_input_queue
        16   -> relay_read_reg_spi
        16   -> relay_write_output_queue
        16   -> relay_write_reg_spi
        16   -> vTaskDelayUntil
        16   -> xQueueGenericReceive
        16   -> xQueueGenericSend
        16   -> xTaskGetTickCount
      16   relay_write_output_queue
        16   -> xQueueGenericSend


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "Entering relay_thread...">
      52  ?<Constant "Error in relay_thread...">
      56  ?<Constant "Error in relay_thread...">_1
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       1  current_relay_state
      48  relay_read_input_queue
     288  relay_thread
      34  relay_write_output_queue

 
   1 byte  in section .bss
 136 bytes in section .rodata
 398 bytes in section .text
 
 398 bytes of CODE  memory
 136 bytes of CONST memory
   1 byte  of DATA  memory

Errors: none
Warnings: none
