###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        02/Dec/2014  16:32:16
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\src\packetizer.c
#    Command line =  
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\src\packetizer.c
#        -D USE_STDPERIPH_DRIVER -D STM32F2XX -D USE_STM322xG_EVAL -lcN
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\
#        -o
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F2xx\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2xx_StdPeriph_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Libraries\STM32F2x7_ETH_Driver\inc\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\Common\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\STM32_EVAL\STM322xG_EVAL\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\lwip\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\netif\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\src\include\ipv4\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\lwip_v1.3.2\port\STM32F2x7\FreeRTOS\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\portable\IAR\ARM_CM3\
#        -I
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\..\..\..\..\Utilities\Third_Party\FreeRTOS_v7.4.2\include\
#        -On --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 7.0_2\arm\CMSIS\Include\"
#    List file    =  
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\List\packetizer.lst
#    Object file  =  
#        C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\EWARM\STM322xG_EVAL\Obj\packetizer.o
#
###############################################################################

C:\ihome\MCU\STM\trunk\mcu_dmx\IAR\Project\FreeRTOS\httpserver_netconn\src\packetizer.c
      1          /*
      2           * packetizer.c
      3           * 
      4           * STM32 DMX512
      5           * Copyright (C) 2012 Erik Van Hamme, all rights reserved
      6           * 
      7           * This library is free software; you can redistribute it and/or
      8           * modify it under the terms of the GNU Lesser General Public
      9           * License as published by the Free Software Foundation; either
     10           * version 3 of the License, or (at your option) any later version.
     11           * 
     12           * This library is distributed in the hope that it will be useful,
     13           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     14           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     15           * Lesser General Public License for more details.
     16           * 
     17           * You should have received a copy of the GNU Lesser General Public
     18           * License along with this library; if not, write to the Free Software
     19           * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
     20           */
     21          
     22          /* This is the implementation file for the packetizer. */
     23          
     24          /*
     25           * -------------------- System Includes ----------------------------------------
     26           */
     27          
     28          #include <stdlib.h>
     29          
     30          /*
     31           * -------------------- Local Includes -----------------------------------------
     32           */
     33          
     34          #include "packetizer.h"
     35          
     36          /*
     37           * -------------------- Defines ------------------------------------------------
     38           */
     39          
     40          /*
     41           * -------------------- Type definitions ---------------------------------------
     42           */
     43          
     44          /*
     45           * -------------------- Global variables ---------------------------------------
     46           */
     47          
     48          /*
     49           * -------------------- Prototypes ---------------------------------------------
     50           */
     51          
     52          /*
     53           * -------------------- Method implementations ---------------------------------
     54           */
     55          
     56          void packetizer_init(packetizer_s* p) {
     57              if (p && (p->init == false)) {
     58                  uint32_t size = PACKETIZER_LENGTH * PACKETIZER_BUFFER_PACKETS;
     59                  volatile uint8_t* pBufArray = (volatile uint8_t*) malloc(size);
     60                  if (pBufArray) {
     61                      p->pBuf = (circularbuffer_u8_s*) malloc(sizeof (circularbuffer_u8_s));
     62                      if (p->pBuf) {
     63                          circularbuffer_u8_init(p->pBuf, size, pBufArray);
     64                          p->pBufCount = 0;
     65                          p->pBufCount = 0;
     66                          p->init = true;
     67                      }
     68                  }
     69              }
     70          }
     71          
     72          void packetizer_deinit(packetizer_s* p) {
     73              if (p && (p->init == true)) {
     74                  p->init = false;
     75                  if (p->pBuf) {
     76                      uint8_t* pBufArray = (uint8_t*) p->pBuf->elements;
     77                      if (pBufArray) {
     78                          free(pBufArray);
     79                      }
     80                      free(p->pBuf);
     81                  }
     82                  p->pBufCount = 0;
     83                  p->pBufCount = 0;
     84              }
     85          }
     86          
     87          void packetizer_rx(packetizer_s* p, uint8_t byte) {
     88              if (p && (p->init == true)) {
     89                  if (circularbuffer_u8_full(p->pBuf) != 1) {
     90                      circularbuffer_u8_push(p->pBuf, byte);
     91                      p->pBufCount++;
     92                      p->pBufSince = 0;
     93                  }
     94              }
     95          }
     96          
     97          bool packetizer_complete(packetizer_s* p) {
     98              if (p && (p->init == true)) {
     99                  if (p->pBufCount >= PACKETIZER_LENGTH) {
    100                      return true;
    101                  }
    102              }
    103              return false;
    104          }
    105          
    106          void packetizer_packet(packetizer_s* p, uint8_t* data) {
    107              if (p && (p->init == true)) {
    108                  for(uint32_t i = 0; i < PACKETIZER_LENGTH; i++) {
    109                      data[i] = circularbuffer_u8_pop(p->pBuf);
    110                      p->pBufCount--;
    111                  }
    112              }
    113          }
    114          
    115          void packetizer_tick(packetizer_s* p) {
    116              if (p && (p->init == true)) {
    117                  if ((p->pBufCount > 0) && (p->pBufSince > PACKETIZER_TIMEOUT_TICKS)) {
    118                      // Reinitialize the circular buffer, this has the effect that all
    119                      // data in it is cleared.
    120                      // We can clear the whole buffer because the newest byte in the
    121                      // buffer is already older then the threshold.
    122                      // Reuse the size and elements items.
    123                      circularbuffer_u8_init(p->pBuf, p->pBuf->size, p->pBuf->elements);
    124                  }
    125              }
    126          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   packetizer_complete
      16   packetizer_deinit
        16   -> free
      16   packetizer_init
        16   -> circularbuffer_u8_init
        16   -> malloc
      16   packetizer_packet
        16   -> circularbuffer_u8_pop
      16   packetizer_rx
        16   -> circularbuffer_u8_full
        16   -> circularbuffer_u8_push
       8   packetizer_tick
         8   -> circularbuffer_u8_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      26  packetizer_complete
      54  packetizer_deinit
      66  packetizer_init
      42  packetizer_packet
      48  packetizer_rx
      42  packetizer_tick

 
 278 bytes in section .text
 
 278 bytes of CODE memory

Errors: none
Warnings: 1
